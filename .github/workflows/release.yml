name: Release
on:
  release:
    types: [created]
    #branches: master

jobs:
  package:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1.7.2
        with: { dotnet-version: '5.0' }

      # - uses: actions/cache@v2.1.5
      #   with:
      #     path: ~/.nuget/packages
      #     key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
      #     restore-keys: ${{ runner.os }}-nuget-

      - run: | # dirty parsing hack. waiting for suitable trigger option to provide custom data.
          # the command doesn't support \d \w for some reason.
          REGEX='^([a-zA-Z]*) Release ([0-9]\.[0-9]\.[0-9]+)$'
          RELEASE_NAME=${{ github.event.release.name }}
          [[ ${RELEASE_NAME} =~ ${REGEX} ]]
      - run: |
          echo The release "${RELEASE_NAME}" does not follow the convention "<Project> Release <Version>".
          exit 1
        if: ${BASH_REMATCH[0]} == ''
      - run: |
          NAME=${BASH_REMATCH[1]}
          PROJECT_PATH=src/${NAME}/${NAME}.csproj
          VERSION=${BASH_REMATCH[2]}
        if: ${BASH_REMATCH[0]} != ''
      - run: NUGET_VERSION=${VERSION}-prerelease
        if: github.event.release.prerelease
      - run: NUGET_VERSION=${VERSION}
        if: github.event.release.prerelease == false
      # useful link: https://docs.github.com/en/developers/webhooks-and-events/webhook-events-and-payloads#release

      - run: dotnet restore -v n
      - run: dotnet build -v n -c release --no-restore -p:version=${VERSION}
      - run: dotnet pack ${PROJECT_PATH} -o packages -p:PackageVersion=${NUGET_VERSION} -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg -v n -c release --no-restore --no-build --no-dependencies

      - uses: actions/upload-artifact@v2.2.3
        with:
          name: packages
          path: |
            packages/*.nupkg
            packages/*.snupkg
          retention-days: 30
        if: always()

  publish:
    runs-on: ubuntu-latest
    needs: package
    env:
      API_KEY: ${{ secrets.NUGET_API_KEY }}
    steps:
      - uses: actions/download-artifact@v2.0.9
        with:
          name: packages
      - run: dotnet nuget push *.nupkg -k ${API_KEY} -s https://api.nuget.org/v3/index.json -t 30
      - run: dotnet nuget push *.snupkg -k ${API_KEY} -s https://api.nuget.org/v3/index.json -t 30
      # if ubuntu-latest doesn't work
      # - run: |
      #     for f in *.nupkg
      #     do
      #       curl -vX PUT -u "iotbusters:$GITHUB_TOKEN" -F package=@$f $GITHUB_FEED
      #     done
