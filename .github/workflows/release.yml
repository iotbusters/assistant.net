name: Release
on:
  release:
    types: [created, edited]

jobs:
  resolve-context: # dirty parsing hack. waiting for suitable trigger option to provide custom data.
    runs-on: ubuntu-latest
    outputs:
      path: ${{ steps.parse-release-name.outputs.path }}
      project-path: ${{ steps.parse-release-name.outputs.project-path }}
      version: ${{ steps.parse-release-name.outputs.version }}
      nuget-version: ${{ steps.parse-release-name.outputs.nuget-version }}
    steps:
      - id: parse-release-name
        name: Parse release name
        run: |
          REGEX="^([a-zA-Z]*) Release ([0-9]\.[0-9]\.[0-9]+)$"
          RELEASE_NAME="${{ github.event.release.name }}"
          [[ ${RELEASE_NAME} =~ ${REGEX} ]]
          if [ -z "${BASH_REMATCH[0]}" ] # no match
          then
            echo "The release \'${RELEASE_NAME}\' does not follow the convention \'<Project> Release <Version>\'."
            exit 1
          fi
          PROJECT_NAME="${BASH_REMATCH[1]}"
          VERSION="${BASH_REMATCH[2]}"
          PATH="src/${PROJECT_NAME}"
          PROJECT_PATH="${PATH}/${PROJECT_NAME}.csproj"
          if [ ${{ github.event.release.prerelease }} ]
          then
            NUGET_VERSION="${VERSION}-prerelease"
          else
            NUGET_VERSION="${VERSION}"
          fi
          echo ::set-output name=path::${PATH}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=project-path::${PROJECT_PATH}
          echo ::set-output name=nuget-version::${NUGET_VERSION}
      # useful link:
      # https://docs.github.com/en/developers/webhooks-and-events/webhook-events-and-payloads#release
      # https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

  package:
    runs-on: ubuntu-latest
    needs: resolve-context
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1.7.2
        with: { dotnet-version: '5.0' }

      - uses: actions/cache@v2.1.5
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('${{ needs.resolve-context.outputs.path }}/**/packages.lock.json') }}
          restore-keys: ${{ runner.os }}-nuget-

      - run: dotnet restore ${{ needs.resolve-context.outputs.project-path }} -v n
      - run: dotnet build ${{ needs.resolve-context.outputs.project-path }} -p:Version=${{ needs.resolve-context.outputs.version }} -c Release --no-restore -v n
      - run: dotnet pack ${{ needs.resolve-context.outputs.project-path }} -p:PackageVersion=${{ needs.resolve-context.outputs.nuget-version }} -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg -o packages -c Release --no-restore --no-build --no-dependencies -v n

      - uses: actions/upload-artifact@v2.2.3
        with:
          name: packages
          path: |
            packages/*.nupkg
            packages/*.snupkg
          retention-days: 30

  publish:
    runs-on: ubuntu-latest
    needs: package
    env:
      API_KEY: ${{ secrets.NUGET_API_KEY }}
    steps:
      - uses: actions/download-artifact@v2.0.9
        with:
          name: packages
      - run: dotnet nuget push *.nupkg -k ${API_KEY} -s https://api.nuget.org/v3/index.json -t 30
