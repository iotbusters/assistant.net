name: CI/CD
on:
  push:
    branches: [master]
    paths:
      - .github/workflows/ci-cd.yml
      - src/**
      - tests/**
      - assistant.net.sln
      - LICENSE
env:
  VERSION: '${{ vars.MAJOR_MINOR_VERSION }}.${{ github.run_number }}'

jobs:
  change-detect:
    runs-on: ubuntu-latest
    if: github.event.commits[0].id != '' # to avoid failures if no commit push (e.g. rebasing).
    steps:
      - uses: actions/checkout@v3.4.0
        with: { fetch-depth: 0 }

      - name: detect code changes
        id: change-detected
        run: |
          LATEST_RELEASE=$(git describe --abbrev=0 --tags)
          COMMITS=$(git rev-list $LATEST_RELEASE..${{ github.event.after }})
          COMMIT_SUBJECTS=()
          for COMMIT in $COMMITS
          do
            COMMIT_MESSAGE=$(git show -s --format=%s -1 $COMMIT)
            COMMIT_SUBJECTS+=("[${COMMIT:0:7}] $COMMIT_MESSAGE")
          done
          CHANGES=$(git diff --name-only "$LATEST_RELEASE"..${{ github.event.after }})
          echo "latest-release=$LATEST_RELEASE" >> $GITHUB_OUTPUT
          echo "commit-subjects=$COMMIT_SUBJECTS" >> $GITHUB_OUTPUT
          echo "ci-changes=$(echo "$CHANGES" | grep -c -E '\.(cs|csproj|json|yml)$')" >> $GITHUB_OUTPUT
          echo "core=$(echo "$CHANGES" | grep -c src/Core/)" >> $GITHUB_OUTPUT
          echo "serialization=$(echo "$CHANGES" | grep -c src/Serialization/)" >> $GITHUB_OUTPUT
          echo "serialization-json=$(echo "$CHANGES" | grep -c src/Serialization.Json/)" >> $GITHUB_OUTPUT
          echo "serialization-proto=$(echo "$CHANGES" | grep -c src/Serialization.Proto/)" >> $GITHUB_OUTPUT
          echo "storage=$(echo "$CHANGES" | grep -c src/Storage/)" >> $GITHUB_OUTPUT
          echo "storage-mongo=$(echo "$CHANGES" | grep -c src/Storage.Mongo/)" >> $GITHUB_OUTPUT
          echo "storage-sqlite=$(echo "$CHANGES" | grep -c src/Storage.Sqlite/)" >> $GITHUB_OUTPUT
          echo "diagnostics=$(echo "$CHANGES" | grep -c src/Diagnostics/)" >> $GITHUB_OUTPUT
          echo "logging=$(echo "$CHANGES" | grep -c src/Logging/)" >> $GITHUB_OUTPUT
          echo "messaging=$(echo "$CHANGES" | grep -c src/Messaging/)" >> $GITHUB_OUTPUT
          echo "web-client=$(echo "$CHANGES" | grep -c src/Messaging.Web.Client/)" >> $GITHUB_OUTPUT
          echo "web-server=$(echo "$CHANGES" | grep -c src/Messaging.Web.Server/)" >> $GITHUB_OUTPUT
          echo "mongo-client=$(echo "$CHANGES" | grep -c src/Messaging.Mongo.Client/)" >> $GITHUB_OUTPUT
          echo "mongo-server=$(echo "$CHANGES" | grep -c src/Messaging.Mongo.Server/)" >> $GITHUB_OUTPUT
          echo "sqlite-client=$(echo "$CHANGES" | grep -c src/Messaging.Sqlite.Client/)" >> $GITHUB_OUTPUT
          echo "sqlite-server=$(echo "$CHANGES" | grep -c src/Messaging.Sqlite.Server/)" >> $GITHUB_OUTPUT
          echo "generic-client=$(echo "$CHANGES" | grep -c src/Messaging.Generic.Client/)" >> $GITHUB_OUTPUT
          echo "generic-server=$(echo "$CHANGES" | grep -c src/Messaging.Generic.Server/)" >> $GITHUB_OUTPUT
          echo "total=$(echo "$CHANGES" | wc -l)" >> $GITHUB_OUTPUT
    outputs:
      latest-release: ${{ steps.change-detected.outputs.latest-release }}
      commit_subjects: ${{ steps.change-detected.outputs.commit-subjects }}
      ci-changes: ${{ steps.change-detected.outputs.ci-changes }}
      core: ${{ steps.change-detected.outputs.core }}
      serialization: ${{ steps.change-detected.outputs.serialization }}
      serialization-json: ${{ steps.change-detected.outputs.serialization-json }}
      serialization-proto: ${{ steps.change-detected.outputs.serialization-proto }}
      storage: ${{ steps.change-detected.outputs.storage }}
      storage-mongo: ${{ steps.change-detected.outputs.storage-mongo }}
      storage-sqlite: ${{ steps.change-detected.outputs.storage-sqlite }}
      diagnostics: ${{ steps.change-detected.outputs.diagnostics }}
      logging: ${{ steps.change-detected.outputs.logging }}
      messaging: ${{ steps.change-detected.outputs.messaging }}
      web-client: ${{ steps.change-detected.outputs.web-client }}
      web-server: ${{ steps.change-detected.outputs.web-server }}
      mongo-client: ${{ steps.change-detected.outputs.mongo-client }}
      mongo-server: ${{ steps.change-detected.outputs.mongo-server }}
      sqlite-client: ${{ steps.change-detected.outputs.sqlite-client }}
      sqlite-server: ${{ steps.change-detected.outputs.sqlite-server }}
      generic-client: ${{ steps.change-detected.outputs.generic-client }}
      generic-server: ${{ steps.change-detected.outputs.generic-server }}
      total: ${{ steps.change-detected.outputs.total }}

  build:
    runs-on: ubuntu-latest
    needs: change-detect
    if: needs.change-detect.outputs.ci-changes != '0'
    steps:
      - uses: actions/checkout@v3.4.0
      - uses: actions/setup-dotnet@v3.0.3
        with: { dotnet-version: '7.0' }

      - name: restore (prepare)
        uses: actions/cache/restore@v3.3.1
        with:
          path: ~/.nuget/packages
          key: nuget-${{ hashFiles('src/**/*.csproj') }}
          restore-keys: nuget-${{ hashFiles('src/**/*.csproj') }}

      - name: restore
        run: dotnet restore assistant.net.sln -v n
      - name: build
        run: dotnet build assistant.net.sln -p:Version=${{ env.VERSION }} -c Release --no-restore -v n
      - name: test
        run: dotnet test assistant.net.sln -v n -c Release --no-restore --no-build -l junit -p:CollectCoverage=true -p:CoverletOutputFormat=opencover

      - name: publish test result
        uses: EnricoMi/publish-unit-test-result-action@v2.6.1
        with:
          files: |
            **/TestResults.xml
        if: always()
      - name: publish coverage result
        uses: codecov/codecov-action@v3.1.1
        with:
          files: |
            **/coverage.opencover.xml
        if: always()
      - name: upload result
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ci-results
          path: |
            **/TestResults.xml
            **/coverage.opencover.xml
          retention-days: 60
        if: always()

      - name: upload binaries (prepare license)
        run: |
          mkdir release-binaries
          cp LICENSE release-binaries
        if: needs.change-detect.outputs.ci-changes != '0'
      - name: upload binaries
        run: cp -r src release-binaries/src
        if: needs.change-detect.outputs.ci-changes != '0'
      - name: upload binaries (prepare package counter)
        id: count-changes
        run: echo "total-package-prepared-count=$(ls release-binaries/src | wc -l)" >> $GITHUB_OUTPUT
      - name: upload binaries
        uses: actions/upload-artifact@v3.1.2
        with:
          name: release-binaries
          path: |
            release-binaries/**/*.csproj
            release-binaries/**/*.xml
            release-binaries/**/*.dll
            release-binaries/**/*.pdb
            release-binaries/**/*.json
            !release-binaries/**/obj/**/*.dll
            !release-binaries/**/obj/**/*.pdb
            release-binaries/LICENSE
          retention-days: 7

      # it duplicates actions/upload-artifact@v3.1.2
      # todo: remove once actions/download-artifact supports cross workflow artifacts.
      # https://github.com/actions/toolkit/pull/517
      - name: upload binaries (workaround)
        uses: actions/cache/save@v3.3.1
        with:
          path: release-binaries
          key: ${{ env.KEY }}
        env:
          KEY: ${{ runner.os }}-release-binaries-${{ env.VERSION }}

    outputs:
      total-package-prepared-count: ${{ steps.count-changes.outputs.total-package-prepared-count }}

  pre-release:
    runs-on: ubuntu-latest
    needs: [change-detect, build]
    # ensure the artifact were created to skip empty releases.
    if: needs.build.outputs.total-package-prepared-count != '0'
    steps:
      - name: create release (ensure binaries)
        uses: actions/download-artifact@v3.0.2
        with:
          name: release-binaries

      - name: create release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Assistant.NET Release ${{ env.VERSION }}
          prerelease: true
          draft: true # published event isn't triggered automatically, so release is created as draft to publish manually.
          body: |
            Changed files: ${{ needs.change-detect.outputs.total }} ([see changes](https://github.com/iotbusters/assistant.net/compare/${{ needs.change-detect.outputs.latest-release }}..${{ github.event.after }}))
            Packed projects: ${{ needs.build.outputs.total-package-prepared-count }}
            <details>
              <summary>Package changes</summary>
              <ul>
                <li>Core: ${{ needs.change-detect.outputs.core }}</li>
                <li>Serialization: ${{ needs.change-detect.outputs.serialization-json }}</li>
                <li>Serialization.Json: ${{ needs.change-detect.outputs.serialization-json }}</li>
                <li>Serialization.Proto: ${{ needs.change-detect.outputs.serialization-proto }}</li>
                <li>Storage: ${{ needs.change-detect.outputs.storage }}</li>
                <li>Storage.Mongo: ${{ needs.change-detect.outputs.storage-mongo }}</li>
                <li>Storage.Sqlite: ${{ needs.change-detect.outputs.storage-sqlite }}</li>
                <li>Diagnostics: ${{ needs.change-detect.outputs.diagnostics }}</li>
                <li>Logging: ${{ needs.change-detect.outputs.logging }}</li>
                <li>Messaging: ${{ needs.change-detect.outputs.messaging }}</li>
                <li>Messaging.Web.Client: ${{ needs.change-detect.outputs.web-client }}</li>
                <li>Messaging.Web.Server: ${{ needs.change-detect.outputs.web-server }}</li>
                <li>Messaging.Mongo.Client: ${{ needs.change-detect.outputs.mongo-client }}</li>
                <li>Messaging.Mongo.Server: ${{ needs.change-detect.outputs.mongo-server }}</li>
                <li>Messaging.Sqlite.Client: ${{ needs.change-detect.outputs.sqlite-client }}</li>
                <li>Messaging.Sqlite.Server: ${{ needs.change-detect.outputs.sqlite-server }}</li>
                <li>Messaging.Generic.Client: ${{ needs.change-detect.outputs.generic-client }}</li>
                <li>Messaging.Generic.Server: ${{ needs.change-detect.outputs.generic-server }}</li>
              </ul>
            </details>
            <details>
              <summary>Commits</summary>
              <ul>
                <li>${{ join(needs.change-detect.outputs.commit_subjects, '</li><li>') }}</li>
              </ul>
            </details>
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
