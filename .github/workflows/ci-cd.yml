name: CI/CD
on:
  push:
    branches: [master]
env:
  VERSION: '${{ secrets.MAJOR_MINOR_VERSION }}.${{ github.run_number }}'
  ALL_PACKAGES: true

jobs:
  change-detect:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
        with: { fetch-depth: 100 }

      - name: change-detected
        id: change-detected
        run: |
          CHANGES=$(git diff --name-only ${{ github.event.commits[0].id }}~1..${{ github.event.after }})
          echo ::set-output name=important-changes::$(echo $CHANGES | grep -c -E '\.(cs|csproj|json)$')
          echo ::set-output name=core::$(echo $CHANGES | grep -c src/Core/)
          echo ::set-output name=storage::$(echo $CHANGES | grep -c src/Storage/)
          echo ::set-output name=diagnostics::$(echo $CHANGES | grep -c src/Diagnostics/)
          echo ::set-output name=messaging::$(echo $CHANGES | grep -c src/Messaging/)
          echo ::set-output name=web::$(echo $CHANGES | grep -c src/Messaging.Web/)
          echo ::set-output name=web-client::$(echo $CHANGES | grep -c src/Messaging.Web.Client/)
          echo ::set-output name=web-server::$(echo $CHANGES | grep -c src/Messaging.Web.Server/)
          echo ::set-output name=total::$(echo $CHANGES | wc -l)
    outputs:
      important-changes: ${{ steps.change-detected.outputs.important-changes }}
      core: ${{ steps.change-detected.outputs.core }}
      storage: ${{ steps.change-detected.outputs.storage }}
      diagnostics: ${{ steps.change-detected.outputs.diagnostics }}
      messaging: ${{ steps.change-detected.outputs.messaging }}
      web: ${{ steps.change-detected.outputs.web }}
      web-client: ${{ steps.change-detected.outputs.web-client }}
      web-server: ${{ steps.change-detected.outputs.web-server }}
      total: ${{ steps.change-detected.outputs.total }}

  build:
    runs-on: ubuntu-latest
    needs: change-detect
    steps:
      - uses: actions/checkout@v2.3.4
        with: { fetch-depth: 100 }
      - uses: actions/setup-dotnet@v1.7.2
        with: { dotnet-version: '5.0' }

      - uses: actions/cache@v2.1.5
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget-

      - run: dotnet restore -v n
      - run: dotnet build -p:Version=${{ env.VERSION }} -c Release --no-restore -v n
      - run: dotnet test -v n -c Release --no-restore --no-build -l junit -p:CollectCoverage=true -p:CoverletOutputFormat=opencover
      - uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: |
            **/TestResults.xml
        if: always()
      - uses: codecov/codecov-action@v1.5.0
        with:
          files: |
            **/coverage.opencover.xml
        if: always()
      - uses: actions/upload-artifact@v2.2.3
        with:
          name: ci-results
          path: |
            **/TestResults.xml
            **/coverage.opencover.xml
          retention-days: 60
        if: always()

      - run: |
          mkdir release-binaries
          cp LICENSE release-binaries
        if: env.ALL_PACKAGES == true || needs.change-detect.outputs.core != '0'
      - run: cp -r src/Core release-binaries/src/Core
        if: env.ALL_PACKAGES == true || needs.change-detect.outputs.core != '0'
      - run: cp -r src/Storage release-binaries/src/Storage
        if: env.ALL_PACKAGES == true || needs.change-detect.outputs.storage != '0' || needs.change-detect.outputs.core != '0'
      - run: cp -r src/Diagnostics release-binaries/src/Diagnostics
        if: env.ALL_PACKAGES == true || needs.change-detect.outputs.diagnostics != '0' || needs.change-detect.outputs.core != '0'
      - run: cp -r src/Messaging release-binaries/src/Messaging
        if: env.ALL_PACKAGES == true || needs.change-detect.outputs.messaging != '0' || needs.change-detect.outputs.storage != '0' || needs.change-detect.outputs.diagnostics != '0' || needs.change-detect.outputs.core != '0'
      - run: cp -r src/Messaging.Web release-binaries/src/Messaging.Web
        if: env.ALL_PACKAGES == true || needs.change-detect.outputs.web != '0' || needs.change-detect.outputs.messaging != '0' || needs.change-detect.outputs.storage != '0' || needs.change-detect.outputs.diagnostics != '0' || needs.change-detect.outputs.core != '0'
      - run: cp -r src/Messaging.Web release-binaries/src/Messaging.Web.Client
        if: env.ALL_PACKAGES == true || needs.change-detect.outputs.web-client != '0' || needs.change-detect.outputs.web != '0' || needs.change-detect.outputs.messaging != '0' || needs.change-detect.outputs.storage != '0' || needs.change-detect.outputs.diagnostics != '0' || needs.change-detect.outputs.core != '0'
      - run: cp -r src/Messaging.Web release-binaries/src/Messaging.Web.Server
        if: env.ALL_PACKAGES == true || needs.change-detect.outputs.web-server != '0' || needs.change-detect.outputs.web != '0' || needs.change-detect.outputs.messaging != '0' || needs.change-detect.outputs.storage != '0' || needs.change-detect.outputs.diagnostics != '0' || needs.change-detect.outputs.core != '0'
      - id: count-changes
        run: echo ::set-output name=total-package-prepared-count::$(ls release-binaries/src | wc -l)
      - uses: actions/upload-artifact@v2.2.3
        with:
          name: release-binaries
          path: |
            release-binaries/**/*.csproj
            release-binaries/**/*.dll
            release-binaries/**/*.pdb
            release-binaries/**/*.json
            !release-binaries/**/obj/**/*.dll
            !release-binaries/**/obj/**/*.pdb
            release-binaries/LICENSE
          retention-days: 7
    outputs:
      total-package-prepared-count: ${{ steps.count-changes.outputs.total-package-prepared-count }}
    if: env.ALL_PACKAGES == true || needs.change-detect.outputs.important-changes != '0'

  pre-release:
    runs-on: ubuntu-latest
    needs: [change-detect, build]
    steps:
        # ensure the artifact were created to skip empty releases.
      - uses: actions/download-artifact@v2.0.9
        with:
          name: release-binaries
      - uses: actions/create-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          prerelease: true
          body: |
            <h4>Released packages: ${{ needs.build.outputs.total-package-prepared-count }}</h4>
            <h4>Release includes ${{ needs.change-detect.outputs.total }} changes</h4>
            <details>
              <summary>Package changes</summary>
              <ul>
                <li>Core: ${{ needs.change-detect.outputs.core }}</li>
                <li>Storage: ${{ needs.change-detect.outputs.storage }}</li>
                <li>Diagnostics: ${{ needs.change-detect.outputs.diagnostics }}</li>
                <li>Messaging: ${{ needs.change-detect.outputs.messaging }}</li>
                <li>Messaging.Web: ${{ needs.change-detect.outputs.web }}</li>
                <li>Messaging.Web.Client: ${{ needs.change-detect.outputs.web-client }}</li>
                <li>Messaging.Web.Server: ${{ needs.change-detect.outputs.web-server }}</li>
              </ul>
            </details>
            <details>
              <summary>Commits</summary>
              <ul>
                <li>${{ join(github.event.commits.*.message, '</li><li>') }}</li>
              </ul>
            </details>
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    if: needs.build.outputs.total-package-prepared-count != '0'

  # todo: remove once cd workflow started triggering.
  pack-packages:
    runs-on: ubuntu-latest
    needs: pre-release
    steps:
      - uses: actions/setup-dotnet@v1.7.2
        with: { dotnet-version: '5.0' }

      - uses: actions/download-artifact@v2.0.9
        with:
          name: release-binaries

      - uses: actions/cache@v2.1.5
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget-

      - name: pack
        run: |
          NUGET_VERSION=${VERSION}-prerelease
          # it cannot find csproj files for some reason
          find . -name *.csproj |
          xargs -i dotnet pack -p:PackageVersion=${NUGET_VERSION} --include-source --include-symbols -p:SymbolPackageFormat=snupkg -o packages -c Release --no-restore --no-build --no-dependencies -v n {}

      - uses: actions/upload-artifact@v2.2.3
        with:
          name: release-packages
          path: |
            packages/*.nupkg
            packages/*.snupkg
          retention-days: 30

  # todo: remove once cd workflow started triggering.
  publish-packages:
    runs-on: ubuntu-latest
    needs: pack-packages
    steps:
      - uses: actions/setup-dotnet@v1.7.2
        with: { dotnet-version: '5.0' }

      - uses: actions/download-artifact@v2.0.9
        with:
          name: release-packages

      - name: publish
        run: |
          API_KEY=${{ secrets.NUGET_API_KEY }}
          find packages -name '*.nupkg' |
          xargs -i dotnet nuget push -k ${API_KEY} -s https://api.nuget.org/v3/index.json -t 30 {}
